// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl   = env("DIRECT_URL")

}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model MenuItem{
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)  @unique
  amharicname String @db.VarChar(255)
  description String @db.Text
  price Int
  image_url String @db.VarChar(255)
  outOfStock   Boolean @default(false)
}

model Order {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customerId  Int
  customer    Customer @relation(fields: [customerId], references: [id])
  cart     Json     
  total     Int
  note      String?
  deliveryTimeSlot String?
  status    OrderStatus
  paymentMode PaymentMode
  
}

model Customer {
  id        Int      @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String @unique
  phone     String @unique
  address   String
  orders    Order[]
  
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELED
}

enum PaymentMode{
  CASH
  MOBILEMONEY
}

enum Role {
  USER
  STAFF
  ADMIN
}
